<rss version="2.0">
<channel>
<title>Brandon Rohrer</title>
<link>https://www.brandonrohrer.com</link>
<description>Brandon Rohrer's blog</description>



  <item>
    <title>
    What can you do when the instituion fails you?
    </title>
    <link>
    https://www.brandonrohrer.com/org_response.html
    </link>
    <pubDate>
    Sun, 21 Sep 2025 08:36:00 EDT
    </pubDate>
    <guid>
    https://www.brandonrohrer.com/org_response.html#top
    </guid>
    <description><![CDATA[

 <h3>A leader in my organization did something I hate.</h3>
        <h3>What do I do now?</h3>

        <p>
          Poor behavior by an organization’s leaders isn’t an uncommon
          scenario, nor is it a new one. Most of us will find ourselves in the
          situation at some point. What do we do when our academic
          institution/company/nonprofit does something unethical, illegal, or
          in really poor taste? How do we trade off the
          benefits of membership with the taint of association? This is an
          intensely personal question, and there’s no way I can answer it for
          you, but I can offer some starting points for considering your
          response.
        </p>

        <h3>It hurts</h3>

        <p>
          When this happens, the initial experience is one of pain. You may
          feel one or more of these:
        </p>

        <p>
          <strong>Betrayal of trust</strong>. This type of behavior is not what you signed on for. Maybe you just wanted satisfying employment or to make the world a little better place. And maybe leaders have said lofty things about values and vision. Then this happened. It’s a bait-and-switch and you feel betrayed.
        </p>

        <p>
          <strong>Personal injury</strong>. Leaders' actions may hurt you directly. Sexual harassment and discrimination are all-to-common ways for this to happen, but it can also come in the form of verbal abuse, recognition withheld, or failing to provide a physically safe work environment.
        </p>

        <p>
          <strong>Guilt</strong>. You may feel bad about yourself for being part of something that fails to live up to its promises. You might even feel personally accountable for leaders’ actions. This can manifest as a persistent gnawing feeling in your stomach that makes it hard to get out of bed.
        </p>

        <p>
          <strong>Shame</strong>. It’s really natural to feel worried about what other people think&mdash;that they judge you as a sellout or a lemming or a pawn, weak or greedy or foolish. They may even say it in a tweet or to your face over holiday dinners. That stings.
        </p>

        <p>
          While you are feeling these, keep your eyes open for
          <a href=https://en.wikipedia.org/wiki/Gaslighting"">
            <strong>gaslighting</strong></a>, where someone
          tries to convince you that the problem is you.
          Either you
          misunderstood, or you are too sensitive, or there were some
          extenuating circumstances, or "everyone knows that's just how Steve
          is." Gaslighting is manipulative, and it plays on our need
          to calibrate our social interpretations with others. Stick to your
          guns. If something feels wrong or off to you, no one can gainsay
          that. If you start second-guessing your reaction, find a couple
          of people that you trust deeply and reality check your experiences
          with them. Your experiences are yours, and no one can tell you they
          aren't valid.
        </p>

        <h3>Consider your options</h3>

        <p>
          So it hurts. What can you do about it? You have a few options, and they each come with their own upside and downside.
        </p>

        <p>
          <strong>Gadfly</strong>. Criticize the bad behavior to other members
          of the organization. Make it clear that you disapprove.
        </p>

        <ul>
          <li>
            <em>Downside</em>: Leaders may not even be aware of your
            displeasure, much less feel pressure to change. This is a good
            coping mechanism, but may not resolve the issue. If leaders do
            become
            aware of your criticisms, they may move to smooth things over or
            they may try to keep you quiet.
          </li>
          <li>
            <em>Upside</em>: You are doing something. You don’t have to suffer
            in silence. Also, you get a chance to commiserate with other
            members of your organization and support anyone who might be
            feeling isolated. And there is always a small chance that the
            offending leader will hear and see the error of their ways.
          </li>
        </ul>

        <p>
          <strong>Conscience</strong>. Call out leaders’ poor decisions but emphasize opportunities for improvement. Make a call to be better. Provide specific suggestions for corrective actions.
        </p>

        <ul>

          <li>
            <em>Downside</em>: Change is hard and so the default human position
            is to avoid it whenever possible. If leaders are not deliberately
            looking to improve, they will probably do the minimum, which is to
            say a few of the right words without making any substantive
            changes. They also might dismiss the criticism or simply do
            nothing, compounding the original sin.
          </li>
          <li>
            <em>Upside</em>: This is a very constructive approach. It is an
            expression of trust in your leaders.
            Compared to the criticism of the Gadly, it can be easier to hear
            and respond to a Conscience while saving face.
            It gives well meaning and
            responsive leaders a chance to improve and heal the organization.
          </li>
        </ul>

        <p>
          <strong>Dissenter</strong>.
          While maintaining
          affiliation with the organization, condemn the objectionable
          behavior in a public forum, like Twitter or the New York Times.
          A Dissenter is like a Gadfly, except that they
          air their grievances publicly.
        </p>

        <ul>
          <li>
            <em>Downside</em>: Unfortunately, most organizations don't take
            well to this. If you are vocal enough, you will likely be
            marginalized within the organization or even kicked out. This can
            cost a lot, both personally and professionally.
          </li>
          <li>
            <em>Upside</em>: This makes a strong statement to all your social
            and professional circles that you condemn the behavior. It puts distance between you
            and your organization and provides an escape from
            guilt and shame. When conditions are right, this can produce a
            great deal of pressure on the organization to change.
          </li>
        </ul>

        <p>
          <strong>Saboteur</strong>. Stay part of the organization but deliberately
          damage it. Common approaches include obstructing operations or leaking confidential
          information.
        </p>

        <ul>

          <li>
            <em>Downside</em>: It is possible that whatever harm you do will
            touch people in the organization that were not responsible for the
            offenses. You'll need to consider your path carefully if you want
            to avoid collateral damage.
          </li>
          <li>
            There's also a risk that leaders will seek retribution.
            Depending on the circumstances, your reputation may be attacked,
            you may be sued, you may be ostracized. Very large organizations
            have a great deal of power. In extreme cases you can literally
            spend the rest of your life suffering the consequences. I don't say
            this to dissuade you, but to encourage you to think through your
            options carefully.
          </li>
          <li>
            <em>Upside</em>: You can do real damage this way. If you have lost faith in an organization's leaders completely and have been personally harmed, this method offers a bit of justice.
          </li>
        </ul>
        <p>
          <strong>Ghost</strong>. Cut affiliation with the organization.
          Find another job, another community. Move on.
        </p>

        <ul>
          <li>
            <em>Downside</em>: The original infraction goes
            unaddressed. There is no resolution, and no guarantee that the same
            thing won't happen again. You also lose whatever it was that drew
            you to the organization to start with - a salary, a community, a
            common cause.
          </li>
          <li>
            <em>Upside</em>: The immediate cause of your pain may be removed.
            You get the chance to extricate yourself and start over. This is
            can be helpful when you have little hope of redress or improving the
            organization. You cut your losses and move on.
          </li>
        </ul>

        <p>
          <strong>Apostate</strong>. Leave the organization and actively attack
          it from the outside.
        </p>

        <ul>
          <li>
            <em>Downside</em>: Like the Ghost, you give up whatever benefits of membership you
            had. And like the Saboteur, you may end up harming those still in
            the organization that bear no responsibility for leaders'
            actions.
          </li>
          <li>
            <em>Upside</em>: You are more free to operate, since you don't need
            to worry about complying with the organizations norms (or at least
            appearing to). Your criticism can flow freely. You are not
            untouchable, especially to very powerful organizations, but it
            raises the bar for them to retaliate. They can't hold threat of
            expulsion over you. Publicly dismissing you and
            legal recourse are more common responses.
          </li>
        </ul>

        <p>
          <strong>Do nothing</strong>.
        </p>

        <ul>
          <li>
            <em>Downside</em>: Nothing changes. Whatever bad thing happened
            might well happen again. And again.
          </li>
          <li>
            <em>Upside</em>: Sometimes it's not worth the fight. If you are
            close to retirement or vesting it can be easiest just to ride it
            out. There are lots of instances where
            the personal connections or financial benefits of membership
            outweigh whatever embarassment a leader has caused.
            Sometimes, you can't afford to just walk away.
          </li>
          <li>
            Sometimes there just aren't any other viable options. The
            uncertainty of leaving a familiar organization can bring terror and
            paralysis. The thought of leaving friends and colleagues behind
            without support in
            a toxic environment can be profoundly distasteful.
          </li>
          <li>
            If you stay in the organization, you keep whatever goodness is there. You get to continue
            supporting your colleagues and community and drawing support from
            them. There may still be great opportunities for doing good,
            strengthening a community, or financially supporting your loved ones.
          </li>
          <li>
            The Do Nothing strategy can also be accompanied by a mild strain
            of the Saboteur in which you withold your best efforts. After all,
            it's hard to be committed to an organization when you
            feel disappointed or ashamed of its leaders.
          </li>
        </ul>

        <p>
          Choosing what to do can be agonizing.
          There are some big questions to consider. How are the
          ogranization's leaders likely to respond?
          What’s will be the benefit to me and those I care about?
          And what's the cost?
        </p>
        <p>
          Above all else, be true to yourself. You might feel strongly that you
          need to do something without being able to say exactly why. Watch for
          strong feelings that don't fade
          after you've slept on them a couple of times. That’s a
          strong signal. Hang on to that deep-seated conviction, even if well-meaning
          people you trust try to talk you out of it. If you don’t follow
          through with it, you are likely
          to regret it for a long time.
        </p>

        <h3>The leaders of <em>someone else’s</em> organization did something very
          wrong.</h3>
        <h3>What do I do?</h3>

        <p>
          This is also a way-too-common situation. Again, the decision of whether and how to respond is yours alone, but I can offer a few points to consider.
        </p>

        <ul style="list-style-type:disc">
          <li>
            <strong>Organizations are made of individual people</strong>. A company is made up of the
            individuals. A board is made up of individuals. A committee is made
            up of individuals. Individual leaders made very poor decisions.
            The majority of the people in that organization are not responsible
            for those decisions, and may not support them.
          </li>

          <li>
            On a related note, <strong>be gentle when judging members of the
            organization that stay</strong> or fail to condemn it. There's no way to
            know for sure what their constraints or motivations are. They may
            be doing the best they can manage at the moment.
          </li>

          <li>
            Don't put much weight on what a leader says when called out.
            Instead, watch what they do. A sincere
            and specific apology is a great start (and rare enough), but when
            accompanied by repeated offenses it doesn't count for much.
            <strong>Actions
            speak louder than words</strong>. I weight the importance actions-to-words about 20-to-1.
          </li>

          <li>
            Pointing at another organization’s failings don’t make up for those
            in your own. <strong>Make sure you're not just distracting
            yourself</strong> from
            problems closer to home or trying to redirect shame away from
            yourself.
          </li>

          <li>
            Labeling organizations as "evil" tends not to be useful. Regardless
            of their stated purpose, nearly every organization has some instances of bad
            behavior. Social irresponsibility, ethical sketchiness, or personal
            disrepect can be found almost anywhere if you look closely enough.
            Sadly, it seems to be a constant in any reasonably-sized group of
            humans. By
            some yardsticks, every organization is evil, and the word loses meaning. It's
            more useful to look at the specifics of the situation. How much
            harm was done? How powerless were the recipients? Was the incident
            isolated or part of a long-running pattern? Was it quickly remedied
            or minimized and covered up? <strong>Keeping your analysis
            concrete</strong> will help you more clearly navigate the trade-offs as you
            consider your response.
          </li>
          <li>
            Consider your goals. An online rant feels good but quickly fades,
            like a rock thrown into a pond.
            <strong>Reporting specific events and advocating
            specific corrections</strong> carries far more weight and is
            longer-lived.
          </li>

        </ul>

        <p>
          I hope some of the ideas here are helpful to you. If you have additions
          to suggest or a story to tell, don't hesitate to send me an email
          (brohrer@gmail.com) or post it on Twitter (@_brohrer_).
        </p>

        <p>
          I struggled with when to release this post. It's natural to look at whatever happened in the news yesterday and assume it was a trigger. But this has been brewing for decades.
              I’m not an expert in this area. These are opinions only.
              Most importantly <strong>I haven't experienced what you've
              experienced</strong>. Take anything here that's useful and
              discard the rest.
        </p>

        <p>
          Know that the frustration, anger, and/or sadness that you feel is
          legitimate and that you have some options. I wish you well as you
          find your path.
        </p>

    ]]></description>
  </item>


  <item>
    <title>
    Transformers from Scratch 12/🧵
    </title>
    <link>
    https://www.brandonrohrer.com/transformers.html#positional_encoding
    </link>
    <pubDate>
    Fri, 19 Sep 2025 08:34:00 EDT
    </pubDate>
    <guid>
    https://www.brandonrohrer.com/transformers.html#positional_encoding
    </guid>
    <description><![CDATA[

   <h3 id="positional_encoding">Positional encoding</h3>
        <p>
          Up to this point, we've assumed that the positions of words
          are ignored, at least for any words coming before the
          very most recent word. Now we get to fix that using
          positional embeddings.
        </p>
        <p>
          There are several ways that position information could be introduced
          into our embedded represetation of words, but the way it was
          done in the original transformer was to add a circular wiggle.
        </p>
        <p style="text-align:center;">
          <img title="Positional encoding introduces a circular wiggle"
            src="https://raw.githubusercontent.com/brohrer/blog_images/refs/heads/main/transformers/positional_encoding.png"
            alt="Positional encoding introduces a circular wiggle"
            style="height:300px;">
        </p>
        <p>
          The position of the word in the embedding space acts as the
          center of a circle. A perturbation is added to it, depending
          on where it falls in the order of the sequence of words.
          For each position, the word is moved the same distance but
          at a different angle, resulting in a circular pattern as you
          move through the sequence.
          Words that are close to each other in the sequence have similar
          perturbations, but words that are far apart are perturbed
          in different directions.
        </p>
        <p>
          Since a circle is a two dimensional figure, representing
          a circular wiggle requires modifying two dimensions of the
          embedding space.
          If the embedding space consists of more than two dimensions
          (which it almost always does), the circular wiggle is
          repeated in all the other pairs of dimensions, but with different
          angular frequency, that is, it sweeps out a different number of
          rotations in each case. In some dimension pairs, the wiggle
          will sweep out many rotations of the circle. In other pairs,
          it will only sweep out a small fraction of a rotation.
          The combination of all these circular wiggles of different
          frequencies gives a good representation of the absolute position
          of a word within the sequence.
        </p>
        <p>
          I'm still developing my intuition for why this works.
          It seems to add position information
          into the mix in a way that doesn't disrupt the learned
          relationships between words and attention.
          For a deeper dive into the math and implications,
          I recommend
          Amirhossein Kazemnejad's positional encoding
          <a href="https://kazemnejad.com/blog/transformer_architecture_positional_encoding/">
          tutorial</a>.
        </p>
        <p>
          In the canonical architecture diagram these blocks show the
          generation of the position code and its addition to the
          embedded words.
        </p>
        <p style="text-align:center;">
          <img title="Transformer architecture showing positional encoding"
            src="https://raw.githubusercontent.com/brohrer/blog_images/refs/heads/main/transformers/architecture_positional.png"
            alt="Transformer architecture showing positional encoding"
            style="height:450px;">
        </p>
    ]]></description>
  </item>


  <item>
    <title>
    Beef up security on your self-hosted webserver
    </title>
    <link>
    https://www.brandonrohrer.com/hosting3
    </link>
    <pubDate>
    Sat, 06 Sep 2025 07:34:00 EDT
    </pubDate>
    <guid>
    https://www.brandonrohrer.com/hosting3
    </guid>
    <description><![CDATA[


<p>
<a href='/hosting'>Part 1</a> of this series showed how to create a new web server
from scratch and <a href='/hosting2'>Part 2</a> showed how to set up a new
domain name on it. Now it's time to make that website more secure, so it can
be protected from the rougher edges of the cyber world.
</p>

<h2><a id="Enable-HTTPS"></a><a href="#Enable-HTTPS">Enable HTTPS</a></h2>

<p>
Currently the web server we've built is only serving unencrypted (http) requests,
rather than encrypted (https) requests. https has become the standard for
the web. It's obviously useful when sharing personal information like
credit card numbers and love notes, but it's even beneficial for seemingly
benign browsing. It's hard to foresee all the ways that someone might use
the browsing habits of your readers against them. To protect them, we'll
set up https.
</p>

<p>
As with so many topics there is an extremely accessible explanation of
how https works in
<a href="https://wizardzines.com/zines/http/">The Wizard Zine on http</a>.
</p>

<p>
If you have been following the other two posts closely, then you are perfectly
set up to follow <a href="https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-22-04">the DigitalOcean tutorial
</a>
walking through https setup. It builds on all the pieces we've put in place:
ufw, a sudo-capable non-root user, a domain name, DNS records, server blocks.
I won't bother copying and pasting here. It's an excellent guide so I'll just
point you to it.
</p>

<p>
<img alt="The table of contents of the DigitalOcean tutorial
" src="https://raw.githubusercontent.com/brohrer/blog_images/refs/heads/main/hosting/https_tutorial.png">
</p>

<p>
If you later decide to add more subdomains or entirely new domains
to your server, you can add them to your certbot with
</p>

<p>
<pre>
sudo certbot &mdash;expand -d blog.e2eml.school,brandonrohrer.com,www.brandonrohrer.com
</pre>
</p>

<p>
and you can check on them any time
</p>

<p>
<pre>
sudo certbot certificates
</pre>
</p>

<h2><a id="Harden-ssh"></a><a href="#Harden-ssh">Harden ssh</a></h2>

<p>
Any publicly exposed ssh port
gets A TON of traffic trying to worm its way in.
In a typical five minute window, my server got requests from users named
</p>

<ul>
<li> <code>default</code></li>
<li> <code>admin</code></li>
<li> <code>admin1</code></li>
<li> <code>sysadmin</code></li>
<li> <code>root2</code></li>
<li> <code>user (twice)</code></li>
<li> <code>user1</code></li>
<li> <code>mytest</code></li>
<li> <code>wangxx</code></li>
<li> <code>dennis (twice)</code></li>
<li> <code>ben</code></li>
</ul>

<p>
<code>dennis</code> gets extra points for persistence and <code>wangxx</code> gets points for style,
but what this drives home is that there are always people trying to get
into your system, no matter how small a target. If they can get in by luck
or clever guesses, they eventually will.
</p>

<p>
Using ssh with keys is a great start. Guessing a modern private key
is very close to impossible.
There are a few other things we can do to protect our new little server.
</p>

<h3><a id="Disallow-passwords-for-login"></a><a href="#Disallow-passwords-for-login">Disallow passwords for login</a></h3>

<p>
To get the full protection of ssh keys, it's necessary to
enforce their use all the time. You can set this up in the <code>ssh_config</code>
file, the central location for all the settings that control ssh behavior.
</p>

<p>
<pre>
sudo nano /etc/ssh/ssh_config
</pre>
</p>

<p>
Find the commented out line containing <code>PasswordAuthentication</code>.
Uncomment it and change it to
</p>

<p>
<pre>
   PasswordAuthentication no
</pre>
</p>

<p>
After making a change to <code>ssh_config</code> restart the ssh daemon so that
it takes effect.
</p>

<p>
<pre>
sudo systemctl restart ssh
</pre>
</p>

<h3><a id="Make-logging-verbose"></a><a href="#Make-logging-verbose">Make logging verbose</a></h3>

<p>
For diagnosing any funny behavior, you can include even more information
in the logs. Also in <code>/etc/ssh/ssh_confg</code> add the line
</p>

<p>
<pre>
    LogLevel INFO
</pre>
</p>

<p>
To inspect the logs at any time
</p>

<p>
<pre>
sudo cat /var/log/auth.log
</pre>
</p>

<p>
This will let you see who is trying to hack into your ssh too.
</p>

<h3><a id="Keep-it-updated"></a><a href="#Keep-it-updated">Keep it updated</a></h3>

<p>
Periodically ssh in to your server and update
</p>

<p>
<pre>
sudo apt update
sudo apt upgrade -y
</pre>
</p>

<h3><a id="Create-an-alias-the-ssh-command-"></a><a href="#Create-an-alias-the-ssh-command-">Create an alias the ssh command </a></h3>

<p>
Another touch you can add is to create an alias. In your shell startup file
on your local machine
(<code>~/.zshrc</code> if you're on a Mac)
you can add a line that looks like
</p>

<p>
<pre>
alias sshserver="ssh brohrer@138.197.69.146"
</pre>
</p>

<p>
This will let you ssh to your web server with the command <code>sshserver</code>
(or whatever word you prefer in its place).
Running
</p>

<p>
<pre>
source ~/.zshrc
</pre>
</p>

<p>
will make it effective immediately.
</p>

<p>
As a helpful reader pointed out, any workflow that requires us to remember
an IP address is flawed. With a few notable exceptions humans are really bad
at consistently remembering strings of numbers.
</p>

<p>
<hr>
</p>

<p>
This collection of defenses puts the web server in a reasonably strong
state. Nothing connected to the internet is ever perfectly protected,
but this makes the server a less appealing target than others.
</p>

    ]]></description>
  </item>


  <item>
    <title>
    Transformers from Scratch 11/🧵
    </title>
    <link>
    https://www.brandonrohrer.com/transformers#embeddings
    </link>
    <pubDate>
    Wed, 03 Sep 2025 19:34:00 EDT
    </pubDate>
    <guid>
    https://www.brandonrohrer.com/transformers#embeddings
    </guid>
    <description><![CDATA[


        <h3 id="embeddings">Embeddings</h3>
        <p>
          As we’ve described them so far, transformers are too big.
          For a vocabulary size <em>N</em> of say 50,000, the transition
          matrix between all pairs of words and all potential next words
          would have 50,000 columns and 50,000 squared (2.5 billion) rows,
          totaling over 100 trillion elements. That is still a stretch,
          even for modern hardware.
        </p>
        <p>
          It’s not just the size of the matrices that’s the problem.
          In order to build a stable transition language model, we would
          have to provide training data illustrating every potential
          sequence several times at least. That would far exceed
          the capacity of even the most ambitious training data sets.
        </p>
        <p>
          Fortunately, there is a workaround for both of these problems,
          embeddings.
        </p>
        <p>
          In a one-hot representation of a language, there is one
          vector element for each word. For a vocabulary of size <em>N</em>
          that vector is an <em>N</em>-dimensional space. Each word represents
          a point in that space, one unit away from the origin along
          one of the many axes. I haven't figured out a great way to
          draw a high dimensional space, but there's a crude representation
          of it below.
        </p>
        <p style="text-align:center;">
          <img title=""
            src="https://raw.githubusercontent.com/brohrer/blog_images/refs/heads/main/transformers/one_hot_vs_embedding.png"
            alt=""
            style="height:300px;">
        </p>
        <p>
          In an embedding, those word points are all taken and rearranged
          (<strong>projected</strong>, in linear algebra terminology)
          into a lower-dimensional space. The picture above shows what
          they might look like in a 2-dimensional space for example.
          Now, instead of needing <em>N</em> numbers to specify a word,
          we only need 2. These are the (<em>x</em>, <em>y</em>)
          coordinates of each point in the new space. Here's what a
          2-dimensional embedding might look like for our toy example,
          together with the coordinates of a few of the words.
        </p>
        <p style="text-align:center;">
          <img title=""
            src="https://raw.githubusercontent.com/brohrer/blog_images/refs/heads/main/transformers/embedded_words.png"
            alt=""
            style="height:300px;">
        </p>
        <p>
          A good embedding groups words with similar meanings together.
          A model that works with an embedding learns patterns in the
          embedded space. That means that whatever it learns to do with
          one word automatically gets applied to all the words right next
          to it. This has the added benefit of reducing the amount of
          training data needed. Each example gives a little bit of
          learning that gets applied across a whole neighborhood of words.
        </p>
        <p>
          In this illustration I tried to show that by putting important
          components in one area (<em>battery</em>,
          <em>log</em>, <em>program</em>), prepositions in another
          (<em>down</em>, <em>out</em>), and verbs near the center
          (<em>check</em>, <em>find</em>, <em>ran</em>). In an actual embedding
          the groupings may not be so clear or intuitive, but the
          underlying concept is the same. Distance is small between words
          that behave similarly.
        </p>
        <p>
          An embedding reduces the number of parameters needed by
          a tremendous amount. However, the fewer the dimensions in the
          embedded space, the more information about the original
          words gets discarded. The richness of a language still
          requires quite a bit of space to lay out all the important
          concepts so that they don't step on each other's toes.
          By choosing the size of the embedded space,
          we get to trade off computational load for model accuracy.
        </p>
        <p>
          It will probably not surprise you to learn that projecting
          words from their one-hot representation to an embedded space
          involves a matrix multiplication. Projection is what matrices
          do best. Starting with a one-hot matrix that has one row and
          <em>N</em> columns, and moving to an embedded space of two
          dimensions, the projection matrix will have <em>N</em> rows
          and two columns, as shown here.
        </p>
        <p style="text-align:center;">
          <img title="A projection matrix describing an embedding"
            src="https://raw.githubusercontent.com/brohrer/blog_images/refs/heads/main/transformers/embedding_projection.png"
            alt="A projection matrix describing an embedding"
            style="height:350px;">
        </p>
        <p>
          This example shows how a one-hot vector, representing for example
          <em>battery</em>, pulls out the row associated with it,
          which contains the coordinates of the word in the embedded space.
          In order to make the relationship clearer,
          the zeros in the one-hot vector are hidden, as are all the other rows
          that don't get pulled out of the projection matrix.
          The full projection matrix is dense, each row containing the
          coordinates of the word it's associated with.
        </p>
        <p>
          Projection matrices can convert the original collection of one-hot
          vocabulary vectors into any configuration in a space of whatever
          dimensionality you want.
          The biggest trick is finding a useful
          projection, one that has similar words grouped together, and
          one that has enough dimensions to spread them out.
          There are some decent pre-computed embeddings for common langauges,
          like English. Also, like everything else in the transformer,
          it can be learned during training.
        </p>
        <p>
          In the Figure 1 architecture diagram of the original paper,
          here's where the embedding happens.
        </p>
        <p style="text-align:center;">
          <img title="Transformer architecture showing the embedding block"
            src="https://raw.githubusercontent.com/brohrer/blog_images/refs/heads/main/transformers/architecture_embedding.png"
            alt="Transformer architecture showing the embedding block"
            style="height:450px;">
        </p>
    ]]></description>
  </item>


  <item>
    <title>
    Attaching your web server to a domain name
    </title>
    <link>
    https://www.brandonrohrer.com/hosting2.html
    </link>
    <pubDate>
    Tue, 02 Sep 2025 19:34:00 EDT
    </pubDate>
    <guid>
    https://www.brandonrohrer.com/hosting2.html
    </guid>
    <description><![CDATA[

<p>
In <a href='/hosting'>part one</a> of this series we set up a web server.
The next step is to make it act like a real website.
</p>

<h2><a id="Buy-a-domain-name"></a><a href="#Buy-a-domain-name">Buy a domain name</a></h2>

<p>
The first thing to do is to name it.
Typing <code>http://138.197.69.146</code> to get to your content is impersonal,
boring, and impossible to remember. The name of a website is its
<a href="https://en.wikipedia.org/wiki/Domain_name">domain name</a>.
For example, the domain name for English-language Wikipedia
is <code>en.wikipedia.org</code>.
</p>

<ul>
<li> <code>org</code> is the top level domain (TLD).</li>
<li> <code>wikipedia</code> is the second level domain.</li>
<li> <code>en</code> is a <a href="https://en.wikipedia.org/wiki/Subdomain">subdomain</a>.</li>
</ul>

<p>
Top level domains come in two flavors, generic and country code.
Generic top level domains (gTLDs) include some you are familiar with,
like <code>.com</code> and <code>.org</code>, and a bunch you've probably never seen,
like <code>.anime</code> and <code>.tattoos</code>.
Country code top level domains (ccTLDs) are all two-letter
country codes taken
from <a href="https://en.wikipedia.org/wiki/ISO_3166-1">ISO-3166</a>.
A few of the most common are <code>.uk</code> (United Kingdom),
<code>.de</code> (Germany), and <code>.cn</code> (China).
</p>

<p>
Sometimes people will get creative with country codes and
<a href="https://en.m.wikipedia.org/wiki/Domain_hack">repurpose them</a>.
The <code>.ai</code> (Antigua) ccTLD has been co-opted by a whole generation of
startups. Same for <code>.io</code> (British Indian Ocean Territory).
<code>.me</code> (Montenegro) is a fun one for personalized websites, and the US
state of Maine. <code>.it</code> (Italy) and <code>.to</code> (Tonga) are useful for spelling
English phrases and words like <code>this.is.it</code> and <code>p.ota.to</code>.
</p>

<p>
<figure>
  <img title="A few of the most popular TLDs on Namecheap.  As a rule of thumb, the more popular and commerce-oriented the TLD, the more expensive it will be." alt="Popular TLDs on Namecheap
" src="https://raw.githubusercontent.com/brohrer/blog_images/refs/heads/main/hosting/popular_tlds.png">
  <figcaption>A few of the most popular TLDs on Namecheap.  As a rule of thumb, the more popular and commerce-oriented the TLD, the more expensive it will be.</figcaption>
</figure>
</p>

<p>
The <a href="https://data.iana.org/TLD/tlds-alpha-by-domain.txt">comprehesive list of TLDs
</a> has 1439 of them,
as of August 2025 so it's easy to get overwhelmed. If you get paralyzed
by choice, you're always safe going with dot com.
</p>

<p>
There’s a running joke that the most important part of any project
is choosing the right domain name. There’s another joke that 90% of
projects don’t get past choosing a domain name. It’s fun but not
critical. Put as much or as little thought into it as you want.
It's OK to make this all about you. And anyway, if insipration strikes
next month you can always buy another domain.
</p>

<p>
There are quite a few reputable domain registrars&mdash;places that can sell you a
domain name&mdash;and it's tough to go wrong. I get mine through
<a href="https://www.namecheap.com/">Namecheap</a>, but other popular ones are
<a href="https://www.hostinger.com">Hostinger</a>,
<a href="https://www.godaddy.com/">GoDaddy</a>, and
<a href="https://porkbun.com/">porkbun</a>.
I found <a href="https://www.techradar.com/news/best-domain-registrars">this TechRadar review
</a>
very helpful. You can go to one of these fine establishments and just
buy your domain name of choice, as long as someone else hasn't beat
you to it. It's so cool that with a few clicks and a few bucks you
can claim a a globally unique piece of real estate and start to build
your digital castle there. Trippy.
</p>

<h2><a id="Point-the-domain-to-your-web-server"></a><a href="#Point-the-domain-to-your-web-server">Point the domain to your web server</a></h2>

<p>
The next step is to inform the domain name servers (DNS) of the world
that your new domain name should point to your web server.
</p>

<p>
This most likely is something you can do through the company that sold you
your domain name. The Namecheap interface looks like this, and other domain
name brokers have a similar page.
</p>

<p>
<img alt="Adding Namecheap DNS records
" src="https://raw.githubusercontent.com/brohrer/blog_images/refs/heads/main/hosting/dns_records.png">
</p>

<p>
The important pieces of information here are
</p>

<ul>
<li> <strong>Type</strong> This will be an "A record" (short for <strong>A</strong>dress). There are
a few other useful types but nothing that we need to worry about to get
started. A records establish the IPv4 address assoicated with the domain name.</li>
<li> <strong>Host</strong> This is the domain name being assigned. As a short hand,
<code>@</code> means "whatever domain name you just bought and are now setting up",
maybe something like <code>brandonrohrer.com</code>. <code>www</code> is also shorthand for
<code>www.brandonrohrer.com</code>, just like <code>en</code> in this column would be
shorthand for <code>en.wikipedia.org</code> if we were setting up the Wikipedia page.</li>
<li> ` <strong>Value</strong> The IP address that the Host should be directed to. For us this
will be the IP address of the web server we just created.</li>
<li> <strong>TTL</strong> Time to live for this DNS record on the domain name servers before
they forget about it and have to ask again. "Automatic" is fine unti
you start doing fancy things with DNS.</li>
</ul>

<p>
The entries in this image will send any Internet user in the world who
puts <code>brandonrohrer.com</code> or <code>www.brandonrohrer.com</code> in their browser to
<code>138.197.69.146</code>.
</p>

<p>
DNS is a big topic, and the details can bite you occassionally. If you
have a few minutes and a little curiosity, I recommend checking out
<a href="https://wizardzines.com/zines/dns/">How DNS works</a> by Julia Evans.
It is both ridiculously accessible and deeply informative.
Best $12 you will spend this week.
</p>

<p>
<img alt="The cover of Julia Evans' How DNS works
" src="https://raw.githubusercontent.com/brohrer/blog_images/refs/heads/main/hosting/how_dns_works.png">
</p>

<p>
<img alt="Table of contents of How DNS works
" src="https://raw.githubusercontent.com/brohrer/blog_images/refs/heads/main/hosting/how_dns_contents.png">
</p>

<h2><a id="Wait"></a><a href="#Wait">Wait</a></h2>

<p>
If your domain is brand new, then the DNS records you added may be available
quickly, but more often it can take up to 48 hours. DNSs hang on to
address records that they've read recently (DNS caching) and only ask
for updates after the TTL has expired. Unfortunately this can be
a couple of days.
</p>

<p>
You can check in on the process while waiting. There are several
command line invocations on Linux and MacOS that resolve a domain name.
After reassigning <code>e2eml.school</code> to <code>138.197.69.146</code> here were some
of the ways it showed up.
</p>

<h3><a id="<code>ping</code>"></a><a href="#<code>ping</code>"><code>ping</code></a></h3>

<p>
<pre>
ping e2eml.school
</pre>
</p>

<p>
gave me
</p>

<p>
<pre>
PING e2eml.school (138.197.69.146): 56 data bytes
64 bytes from 138.197.69.146: icmp_seq=0 ttl=46 time=19.565 ms
64 bytes from 138.197.69.146: icmp_seq=1 ttl=46 time=19.744 ms
64 bytes from 138.197.69.146: icmp_seq=2 ttl=46 time=22.920 ms
64 bytes from 138.197.69.146: icmp_seq=3 ttl=46 time=23.076 ms
...
</pre>
</p>

<p>
<code>ping</code> checks how long it takes to send a packet to the destination and
get a response. In the process it also reports the IP address that
the domain resolved to.
</p>

<h3><a id="<code>host</code>"></a><a href="#<code>host</code>"><code>host</code></a></h3>

<p>
<pre>
host e2eml.school
</pre>
</p>

<p>
gave me
</p>

<p>
<pre>
e2eml.school has address 138.197.69.146
...
</pre>
</p>

<p>
<code>host</code> directly resolves the IP address associated with the domain name.
It doesn't necessarily do this in the same way as <code>ping</code>. It can ask
different computers and programs. So it may give a different answer,
as the DNS record changes roll out to the rest of the DNSs.
</p>

<h3><a id="<code>nslookup</code>"></a><a href="#<code>nslookup</code>"><code>nslookup</code></a></h3>

<p>
<pre>
nslookup e2eml.school
</pre>
</p>

<p>
gave me
</p>

<p>
<pre>
Server:		2001:558:feed::1
Address:	2001:558:feed::1#53 <br>
Non-authoritative answer:
Name:	e2eml.school
Address: 138.197.69.146
</pre>
</p>

<p>
The IP address appears here too. This method is also complementary to
<code>ping</code> and <code>host</code>. It can give a different answer.
</p>

<h3><a id="<code>dig</code>"></a><a href="#<code>dig</code>"><code>dig</code></a></h3>

<p>
<pre>
dig +noall +answer e2eml.school
</pre>
</p>

<p>
gave me
</p>

<p>
<pre>
e2eml.school.		1799	IN	A	138.197.69.146
</pre>
</p>

<p>
In yet another way it returns the IP address for the domain.
</p>

<p>
When all of these agree, that's a pretty good sign that the DNS record change
is complete. But the ultimate test is to run and end to end verification.
Make some change to a <code>.html</code> file on the server and see whether it
shows up when you try to read that file in your browser.
</p>

<h2><a id="Add-your-websites-from-a-repository"></a><a href="#Add-your-websites-from-a-repository">Add your websites from a repository</a></h2>

<p>
You can be done now if you want. You have the <code>http://</code> version
of your domain pointing to your IP address, and a place where you
can add all the html files you like. This next step, while optional,
can make it easier to develop web pages and track your changes.
</p>

<p>
Rather than have your web server be your source of truth for your web pages,
you can have your main copy live in a git repository. Then you just pull
this repository to your web server when you want to roll out edits or
new pages.
</p>

<p>
For convenience, name your git repository the same name as your domain
and put all the files in an <code>html</code> subdirectory.
</p>

<p>
<pre>
my.website.com
┗ html
  ┣ index.html
  ┣ ...
</pre>
</p>

<p>
If you're new to git and want to open the black box, <a href="https://jvns.ca/blog/2024/04/25/new-zine&mdash;how-git-works-/">Julia Evans'
Wizard Zines</a>
is an amazing explainer.
There are
<a href="https://www.brandonrohrer.com/git_resources">some other helpful resources</a>
here, especially <a href="https://ohshitgit.com">Oh shit, git!</a> (
also available <a href="https://wizardzines.com/zines/oh-shit-git/">as a zine</a>
), the
repair kit in case things go off the rails.
</p>

<p>
If your repo is on GitHub, then you can put in to your server where
it needs to be with this:
</p>

<p>
<pre>
cd /var/www/
sudo git clone https://github.com/your-github-username/your-domain.git
</pre>
</p>

<p>
Modify as necessary if you are using another git service.
</p>

<p>
Using the <code>http</code> version works great because the web server will be pull-only
and shouldn't need to mess around with keys or authorization because it's
not going to be making any changes.
And any time you make change to any of your files in the repository, you can
re-deploy it with
</p>

<p>
<pre>
sudo git pull origin HEAD
</pre>
</p>

<h2><a id="Set-up-a-server-block"></a><a href="#Set-up-a-server-block">Set up a server block</a></h2>

<p>
To finish setting up nginx to use your web code from git, follow these
excellent instructions in
<a href="https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-20-04#step-5-setting-up-server-blocks-recommended">the Digital Ocean docs</a>
that do a better job than I can of walking you through this. There are a lot of
steps, but they are all copy/paste-able into your ssh console.
</p>

<p>
Putting all the files for your domain in its own directory like this referred
to as a server block. While you can just dump them all in the top level
<code>/var/www/html/</code> directory, this gives a little more structure to them.
And the really cool part is that you can repeat this for other
domain names if you want. No need to spin up another server instance
for each one.
</p>

<p>
At this point, you have a fully deployed website at <code>http://your-domain</code>.
The next post is going to change that into a <code>https://</code> and do some
other things to harden the security of your website and server.
It's a brutal world out there, and it pays to protect yourself.
</p>
      ]]></description>
  </item>


  <item>
    <title>
    Transformers from Scratch 10/🧵
    </title>
    <link>
    https://www.brandonrohrer.com/transformers#second_order_matrix_mult
    </link>
    <pubDate>
    Tue, 26 Aug 2025 19:34:00 EDT
    </pubDate>
    <guid>
    https://www.brandonrohrer.com/transformers#second_order_matrix_mult
    </guid>
    <description><![CDATA[


        <h3 id="second_order_matrix_mult">
          Second order sequence model as matrix multiplications</h3>
        <p>
          Another step that we have been hand wavy about so far is the
          construction of transition matrices. We have been clear about
          the logic, but not about how to do it with matrix multiplications.
        </p>
        <p>
          Once we have the result of our attention step, a vector
          that includes the most recent word and a small
          collection of the words that have preceded it, we need to
          translate that into features, each of which is a word pair.
          Attention masking gets us the raw material that we need,
          but it doesn’t build those word pair features. To do that,
          we can use a single layer fully connected neural network.
        </p>
        <p>
          To see how a neural network layer can create these pairs,
          we'll hand craft one. It will be artificially clean and stylized,
          and its weights will bear no resemblance to the weights in practice,
          but it will demonstrate how the neural network has the
          expressivity necessary to build these two word pair features.
          To keep it small and clean, will focus on just the three
          attended words from this example,
          <em>battery</em>, <em>program</em>, <em>ran</em>.
        </p>
        <p style="text-align:center;">
          <img title="Neural network layer for creating multi word features"
            src="https://raw.githubusercontent.com/brohrer/blog_images/refs/heads/main/transformers/feature_creation_layer.png"
            alt="Neural network layer for creating multi word features"
            style="height:350px;">
        </p>
        <p>
          In the layer diagram above, we can see how the weights act to combine
          the presence and absence of each word into a collection of features.
          This can also be expressed in matrix form.
        </p>
        <p style="text-align:center;">
          <img title="Weight matrix for creating multi word features"
            src="https://raw.githubusercontent.com/brohrer/blog_images/refs/heads/main/transformers/feature_creation_matrix.png"
            alt="Weight matrix for creating multi word features"
            style="height:250px;">
        </p>
        <p>
          And it can be calculated by a matrix multiplication with a
          vector representing the collection of words seen so far.
        </p>
        <p style="text-align:center;">
          <img title="Calculation of the 'battery, ran' feature"
            src="https://raw.githubusercontent.com/brohrer/blog_images/refs/heads/main/transformers/second_order_feature_battery.png"
            alt="Calculation of the 'battery, ran' feature"
            style="height:200px;">
        </p>
        <p>
          The <em>battery</em> and <em>ran</em> elements are 1 and the
          <em>program</em> element is 0. The <em>bias</em> element is
          always 1, a feature of neural networks. Working through the
          matrix multiplication gives a 1 for the element
          representing <em>battery, ran</em> and a -1 for the element
          representing <em>program, ran</em>. The results for the
          other case are similar.
        </p>
        <p style="text-align:center;">
          <img title="Calculation of the 'program, ran' feature"
            src="https://raw.githubusercontent.com/brohrer/blog_images/refs/heads/main/transformers/second_order_feature_program.png"
            alt="Calculation of the 'program, ran' feature"
            style="height:200px;">
        </p>
        <p>
          The final step in calculating these word combo features is
          to apply a rectified linear unit (ReLU) nonlinearity. The effect
          of this is to substitute any negative value with a zero. This
          cleans up both of these results so they represent the presence
          (with a 1) or absence (with a 0) of each word combination feature.
        </p>
        <p>
          With those gymnastics behind us, we finally have a matrix
          multiplication based method for creating multiword features.
          Although I originally claimed that these consist of the
          most recent word and one earlier word, a closer look at this
          method shows that it can build other features too.
          When the feature creation matrix is learned, rather than hard
          coded, other structures can be learned. Even in this toy example,
          there's nothing to stop the creation of a three-word combination
          like <em>battery, program, ran</em>. If this combination occurred
          commonly enough it would probably end up being represented.
          There wouldn't be any way to indicated what order the words
          occurred in (at least not <a href="#positional_encoding">yet</a>),
          but we could absolutely use their co-occurrence to make predictions.
          It would even be possible to make use of word combos that ignored
          the most recent word, like <em>battery, program</em>. These and
          other types of features are probably created in practice,
          exposing the oversimiplification I made when I claimed that
          transformers are a selective-second-order-with-skips sequence model.
          There's more nuance to it than that, and now you can see exactly
          what that nuance is. This won't be the last time we'll change
          the story to incorporate more subtlety.
        </p>
        <p>
          In this form, the multiword feature matrix is ready for
          one more matrix multiplication, the
          second order sequence model with skips we developed
          <a href="second_order_skips">above</a>. All together, the
          sequence of
          <ul>
            <li>
              feature creation matrix multiplication,
            </li>
            <li>
              ReLU nonlinearity, and
            </li>
            <li>
              transition matrix multiplication
            </li>
          </ul>
          are the feedforward processing steps that get applied after
          attention is applied.
          Equation 2 from the paper shows these steps
          in a concise mathematical formulation.
        </p>
        <p style="text-align:center;">
          <img title="Equations behind the Feed Forward block"
            src="https://raw.githubusercontent.com/brohrer/blog_images/refs/heads/main/transformers/feedforward_equations.png"
            alt="Equations behind the Feed Forward block"
            style="height:300px;">
        </p>
        <p>
          The Figure 1 architecture diagram of the of the paper
          shows these lumped together as the Feed Forward block.
        </p>
        <p style="text-align:center;">
          <img title="Transformer architecture showing the Feed Forward block"
            src="https://raw.githubusercontent.com/brohrer/blog_images/refs/heads/main/transformers/architecture_feedforward.png"
            alt="Transformer architecture showing the Feed Forward block"
            style="height:450px;">
        </p>
      ]]></description>
  </item>

  <item>
    <title>
    Transformers from Scratch 9/🧵
    </title>
    <link>
    https://www.brandonrohrer.com/transformers#attention
    </link>
    <pubDate>
    Mon, 25 Aug 2025 19:34:00 EDT
    </pubDate>
    <guid>
    https://www.brandonrohrer.com/transformers#attention
    </guid>
    <description><![CDATA[


        <h3 id="attention">Attention as matrix multiplication</h3>
        <p>
          Feature weights could be straightforward to build by counting
          how often each word pair/next word transition occurs
          in training, but attention masks are not.
          Up to this point, we've pulled the mask vector out of thin air.
          How transformers find the relevant mask matters. It would be
          natural to use some sort of lookup table, but now we are focusing
          hard on expressing everything as matrix multiplications. We can
          use the same <a href="table_lookup">lookup</a> method we
          introduced above by stacking the mask vectors for every word
          into a matrix and using the one-hot representation of the
          most recent word to pull out the relevant mask.
        </p>
        <p style="text-align:center;">
          <img title="Mask lookup by matrix multiplication"
            src="https://raw.githubusercontent.com/brohrer/blog_images/refs/heads/main/transformers/mask_matrix_lookup.png"
            alt="Mask lookup by matrix multiplication"
            style="height:450px;">
        </p>
        <p>
          In the matrix showing the collection of mask vectors, we've only
          shown the one we're trying to pull out, for clarity.
        </p>
        <p>
          We're finally getting to the point where we can start tying into
          the paper. This mask lookup is represented by the
          <em>QK^T</em> term in the attention equation.
        </p>
        <p style="text-align:center;">
          <img title="Attention equation highlighting QKT"
            src="https://raw.githubusercontent.com/brohrer/blog_images/refs/heads/main/transformers/attention_equation_QKT.png"
            alt="Attention equation highlighting QKT"
            style="height:100px;">
        </p>
        <p>
          The query <em>Q</em> represents the feature of interest and the
          matrix <em>K</em> represents the collection of masks. Because
          it's stored with masks in columns, rather than rows, it needs to
          be transposed (with the <em>T</em> operator) before multiplying.
          By the time we're all done, we'll make some important modifications
          to this, but at this level it captures the concept of a
          differentiable lookup table that transformers make use of.
        </p>

      ]]></description>
  </item>

  <item>
    <title>
    Transformers from Scratch 8/🧵
    </title>
    <link>
    https://www.brandonrohrer.com/transformers#rest_stop
    </link>
    <pubDate>
    Fri, 22 Aug 2025 20:34:00 EDT
    </pubDate>
    <guid>
    https://www.brandonrohrer.com/transformers#rest_stop
    </guid>
    <description><![CDATA[

        <h3 id="rest_stop">Rest Stop and an Off Ramp</h3>
        <p>
          Congratulations on making it this far. You can stop if you want.
          The selective-second-order-with-skips model is a useful way to think
          about what transformers do, at least in the decoder side.
          It captures, to a first approximation, what generative
          language models like
          OpenAI's <a href="https://en.wikipedia.org/wiki/GPT-3">GPT-3</a>
          are doing. It doesn't tell the complete story, but it represents
          the central thrust of it.
        </p>
        <p>
          The next sections cover more of the gap between this
          intuitive explanation and how transformers are implemented.
          These are largely driven by three practical considerations.
          <ol>
            <li>
              <strong>Computers are especially good at matrix
              multiplications.</strong>
              There is an entire industry around
              building computer hardware specifically for fast
              matrix multiplications. Any computation that can
              be expressed as a matrix multiplication can be made
              shockingly efficient. It's a bullet train. If you can get
              your baggage into it, it will get you where you want to go
              real fast.
            </li>
            <li>
              <strong>Each step needs to be differentiable.</strong>
              So far we've just been working with toy examples, and have
              had the luxury of hand-picking all the transition probabilities
              and mask values&mdash;the model <strong>parameters</strong>.
              In practice, these have to be learned via
              <strong>backpropagation</strong>,
              which depends on each computation step
              being differentiable. This means that for any small change
              in a parameter, we can calculate the corresponding
              change in the model error
              or <strong>loss</strong>.
            </li>
            <li>
              <strong>The gradient needs to be smooth and well
              conditioned.</strong>
              The combination of all the
              derivatives for all the parameters is the loss
              <strong>gradient</strong>.
              In practice, getting backpropagation to behave well requires
              gradients that are smooth, that is, the slope doesn’t change
              very quickly as you make small steps in any direction.
              They also behave much better when the gradient is well conditioned,
              that is, it’s not radically larger in one direction than another.
              If you picture a loss function as a landscape, The Grand Canyon
              would be a poorly conditioned one. Depending on whether you are
              traveling along the bottom, or up the side, you will have very
              different slopes to travel. By contrast, the rolling hills of
              the classic Windows screensaver would have a well conditioned
              gradient.
              <br>
              If the science of architecting neural networks is creating
              differentiable building blocks, the art of them is stacking
              the pieces in such a way that
              the gradient doesn’t change too quickly
              and is roughly of the same magnitude in every direction.
            </li>
          </ol>
        </p>

      ]]></description>
  </item>

  <item>
    <title>
    Transformers from Scratch 7/🧵
    </title>
    <link>
    https://www.brandonrohrer.com/transformers#masking
    </link>
    <pubDate>
    Thu, 21 Aug 2025 20:34:00 EDT
    </pubDate>
    <guid>
    https://www.brandonrohrer.com/transformers#masking
    </guid>
    <description><![CDATA[

        <h3 id="masking">Masking</h3>
        <p>
          On more careful consideration, this is unsatisfying. The difference
          between a vote total of 4 and 5 is relatively small. It suggests
          that the model isn't as confident as it could be. And in
          a larger, more organic language model it's easy to imagine that
          such a slight difference could be lost in the statistical noise.
        </p>
        <p>
          We can sharpen the prediction by weeding out all the uninformative
          feature votes. With the exception of <em>battery, ran</em>
          and <em>program, ran</em>. It's helpful to remember at this point
          that we pull the <a href="#table_lookup">relevant rows</a>
          out of the transition matrix by
          multiplying it with a vector showing which features are currently
          active. For this example so far, we've been using the implied
          feature vector shown here.
        </p>
        <p style="text-align:center;">
          <img title="Feature selection vector"
            src="https://raw.githubusercontent.com/brohrer/blog_images/refs/heads/main/transformers/feature_selection.png"
            alt="Feature selection vector"
            style="height: 150px;">
        </p>
        <p>
          It includes a one for each feature that is a combination of
          <em>ran</em> with each of the words that come before it. Any words
          that come after it don't get included in the feature set.
          (In the next word prediction problem these haven't been seen yet,
          and so it's not fair to use them predict what comes next.)
          And this doesn't include all the other possible word
          combinations.
          We can safely ignore these for this example because they will
          all be zero.
        </p>
        <p>
          To improve our results, we can additionally force the unhelpful
          features to zero by creating a <strong>mask</strong>. It's
          a vector full of ones except for the positions you'd like to
          hide or mask, and those are set to zero. In our case we'd like
          to mask everything except for 
          <em>battery, ran</em>
          and <em>program, ran</em>, the only two features that have
          been of any help. 
        </p>
        <p style="text-align:center;">
          <img title="Masked feature activities"
            src="https://raw.githubusercontent.com/brohrer/blog_images/refs/heads/main/transformers/masked_feature_activities.png"
            alt="Masked feature activities"
            style="height:300px;">
        </p>
        <p>
          To apply the mask, we multiply the two vectors element by element.
          Any feature activity value in an unmasked position will be
          multiplied by one and left unchanged. Any feature activity value
          in a masked position will be multiplied by zero, and thus forced
          to zero.
        </p>
        <p>
          The mask has the effect of hiding a lot of the transition matrix.
          It hides the combination of <em>ran</em> with everything except
          <em>battery</em> and <em>program</em>, leaving just the features
          that matter. 
        </p>
        <p style="text-align:center;">
          <img title="Masked transition matrix"
            src="https://raw.githubusercontent.com/brohrer/blog_images/refs/heads/main/transformers/masked_transition_matrix.png"
            alt="Masked transition matrix"
            style="height:350px;">
        </p>
        <p>
          After masking the unhelpful features, the next word predictions
          become much stronger. When the word <em>battery</em> occurs
          earlier in the sentence, the word after <em>ran</em> is
          predicted to be <em>down</em> with a weight of 1 and
          <em>please</em> with a weight of 0. What was a weight difference
          of 25 percent has become a difference of infinity percent.
          There is no doubt what word comes next. The same strong
          prediction occurs for <em>please</em> when
          <em>program</em> occurs early on.
        </p>
        <p>
          This process of selective masking is the <strong>attention</strong>
          called out in the title of the original
          <a href="https://proceedings.neurips.cc/paper/2017/file/3f5ee243547dee91fbd053c1c4a845aa-Paper.pdf">
            paper</a> on transformers.
          So far, what we've descibed is a just an approximation of
          how attention is implemented in the paper. It captures
          the important concepts, but the details are different. We'll
          close that gap later.
        </p>

      ]]></description>
  </item>

  <item>
    <title>
    Transformers from Scratch 6/🧵
    </title>
    <link>
    https://www.brandonrohrer.com/transformers#second_order_skips
    </link>
    <pubDate>
    Wed, 20 Aug 2025 06:34:00 EDT
    </pubDate>
    <guid>
    https://www.brandonrohrer.com/transformers#second_order_skips
    </guid>
    <description><![CDATA[
      <h3 id="second_order_skips">Second order sequence model with skips</h3>
        <p>
          A second order model works well when we only have to look back
          two words to decide what word comes next. What about when we
          have to look back further? Imagine we are building yet another
          language model. This one only has to represent two sentences,
          each equally likely to occur.
          <ul>
            <li>
              <em>Check the program log and find out whether it ran please.
              </em>
            </li>
            <li>
              <em>Check the battery log and find out whether it ran down
              please.</em>
            </li>
          </ul>
        </p>
        <p>
          In this example, in order to determine which word should come after
          <em>ran</em>, we would have to look back 8 words into the past.
          If we want to improve on our second order language model,
          we can of course consider third- and higher order models.
          However, with a significant vocabulary size this takes
          a combination of creativity and brute force
          to execute. A naive implementation of an eighth order model
          would have <em>N</em>^8 rows, a ridiculous number for any
          reasonable vocubulary.
        </p>
        <p>
          Instead, we can do something sly and make a second order model,
          but consider the combinations of the most recent word with
          each of the words that came before. It's still second order,
          because we're only considering two words at a time, but it allows
          us to reach back further and capture <strong>long range
          dependencies</strong>. The difference between this
          second-order-with-skips and a full umpteenth-order model is that
          we discard most of the word order information and
          combinations of preceeeding words. What remains is still pretty
          powerful.
        </p>
        <p>
          Markov chains fail us entirely now, but we can still represent
          the link between each pair of preceding words and the words
          that follow. Here we've dispensed with numerical weights, and
          instead are showing only the arrows associated with non-zero weights.
          Larger weights are shown with heavier lines.
        </p>
        <p style="text-align:center;">
          <img title="Second order with skips feature voting"
            src="https://raw.githubusercontent.com/brohrer/blog_images/refs/heads/main/transformers/feature_voting.png"
            alt="Second order with skips feature voting"
            style="height: 350px;">
        </p>
        <p>
          Here's what it might look like in a transition matrix.
        </p>
        <p style="text-align:center;">
          <img title="Second order with skips transition matrix"
            src="https://raw.githubusercontent.com/brohrer/blog_images/refs/heads/main/transformers/transition_matrix_second_order_skips.png"
            alt="Second order with skips transition matrix"
            style="height: 350px;">
        </p>
        <p>
          This view only shows the rows relevant to predicting the word
          that comes after <em>ran</em>. It shows instances where the most
          recent word (<em>ran</em>) is preceded by each of the other
          words in the vocabulary. Only the relevant values are shown.
          All the empty cells are zeros. 
        </p>
        <p>
          The first thing that becomes apparent is that, when trying to
          predict the word that comes after <em>ran</em>, we no longer
          look at just one line, but rather a whole set of them.
          We've moved out of the Markov realm now. Each row no longer
          represents the state of the sequence at a particular point.
          Instead, each row represents one of many <strong>features</strong>
          that may describe the sequence at a particular point. The
          combination of the most recent word with each of the words
          that came before makes for a collection of applicable rows,
          maybe a large collection. Because of this change in meaning,
          each value in the matrix no longer represents a probability,
          but rather a vote. Votes will be summed and compared to determine
          next word predictions.
        </p>
        <p>
          The next thing that becomes apparent is that most of the features
          don't matter. Most of the words appear in both sentences, and
          so the fact that they have been seen is of no help in predicting
          what comes next. They all have a value of .5. 
          The only two exceptions are <em>battery</em> and <em>program</em>.
          They have some 1 and 0 weights associated with
          the two cases we're trying to distinguish.
          The feature <em>battery, ran</em> indicates that <em>ran</em> was
          the most recent word and that <em>battery</em> occurred somewhere
          earlier in the sentence. This feature has a weight of 1 associated
          with <em>down</em> and a weight of 0 associated with <em>please</em>.
          Similarly, the feature <em>program, ran</em> has the opposite set
          of weights. This structure shows that it is the presence of these
          two words earlier in the sentence that is decisive in predicting
          which word comes next.
        </p>
        <p>
          To convert this set of word-pair features into a next word estimate,
          the values of all the relevant rows need to be summed.
          Adding down the column, the sequence
          <em>Check the program log and find out whether it ran</em>
          generates sums of 0 for all the words, except a 4 for
          <em>down</em> and a 5 for <em>please</em>. The sequence
          <em>Check the battery log and find out whether it ran</em>
          does the same, except with a 5 for
          <em>down</em> and a 4 for <em>please</em>. By choosing the word
          with the highest vote total as the next word prediction,
          this model gets us the right answer, despite having an
          eight word deep dependency.
        </p>

      ]]></description>
  </item>

  <item>
    <title>
    Transformers from Scratch 5/🧵
    </title>
    <link>
    https://www.brandonrohrer.com/transformers#second_order
    </link>
    <pubDate>
    Tue, 19 Aug 2025 20:34:00 EDT
    </pubDate>
    <guid>
    https://www.brandonrohrer.com/transformers#second_order
    </guid>
    <description><![CDATA[
        <h3 id="second_order">Second order sequence model</h3>
        <p>
          Predicting the next word based on only the current word is
          hard. That's like predicting the rest of a tune after being
          given just the first note. Our chances are a lot better if
          we can at least get two notes to go on.
        </p>
        <p>
          We can see how this works in another toy language model
          for our computer commands. We expect that this one
          will only ever see two sentences, in a 40/60 proportion.
          <ul>
            <li>
              <em>Check whether the battery ran down please.</em>
            </li>
            <li>
              <em>Check whether the program ran please.</em>
            </li>
          </ul>
          A Markov chain illustrates a first order model for this.
        </p>
        <p style="text-align:center;">
          <img title="Another first order Markov chain transition model"
            src="https://raw.githubusercontent.com/brohrer/blog_images/refs/heads/main/transformers/markov_chain_2.png"
            alt="Another first order Markov chain transition model"
            style="height: 250px;">
        </p>
        <p>
          Here we can see that if our model looked at the two most recent
          words, instead of just one, that it could do a better job. When it
          encounters <em>battery ran</em>, it knows that the next word
          will be <em>down</em>, and when it sees <em>program ran</em>
          the next word will be <em>please</em>. This eliminates one of
          the branches in the model, reducing uncertainty and increasing
          confidence.
          Looking back two words turns this into a second order Markov model.
          It gives more context on which to base next word predictions.
          Second order Markov chains are more challenging to
          draw, but here are the connections that demonstrate their value.
        </p>
        <p style="text-align:center;">
          <img title="Second order Markov chain"
            src="https://raw.githubusercontent.com/brohrer/blog_images/refs/heads/main/transformers/markov_chain_second_order.png"
            alt="Second order Markov chain"
            style="height:250px;">
        </p>
        <p>
          To highlight the difference between the two,
          here is the first order transition matrix,
        </p>
        <p style="text-align:center;">
          <img title="Another first order transition matrix"
            src="https://raw.githubusercontent.com/brohrer/blog_images/refs/heads/main/transformers/transition_matrix_first_order_2.png"
            alt="Another first order transition matrix"
            style="height: 350px;">
        </p>
        <p>
          and here is the second order transition matrix.
        </p>
        <p style="text-align:center;">
          <img title="Second order transition matrix"
            src="https://raw.githubusercontent.com/brohrer/blog_images/refs/heads/main/transformers/transition_matrix_second_order.png"
            alt="Second order transition matrix"
            style="height: 350px;">
        </p>
        <p>
          Notice how the second order matrix has a separate row for every
          combination of words (most of which are not shown here). That
          means that if we start with a vocabulary size of <em>N</em>
          then the transition matrix has <em>N</em>^2 rows.
        </p>
        <p>
          What this
          buys us is more confidence. There are more ones and fewer
          fractions in the second order model. There's only one row
          with fractions in it, one branch in our model. Intuitively,
          looking at two words instead of just one gives more context,
          more information on which to base a next word guess.
        </p>

      ]]></description>
  </item>

  <item>
    <title>
    How to start publishing an RSS feed
    </title>
    <link>
    https://www.brandonrohrer.com/rss.html
    </link>
    <pubDate>
    Mon, 18 Aug 2025 20:34:00 EDT
    </pubDate>
    <guid>
    https://www.brandonrohrer.com/rss.html
    </guid>
    <description><![CDATA[
<p>
Before Twitter, before LinkedIn, before Facebook, there was
<a href="https://en.wikipedia.org/wiki/RSS">RSS</a>.
Really Simple Syndication is the photocopied 'zine of microblogging.
If there were social media in Mad Max, it would have been RSS. It's
totally outside any centralized control, cheap, gritty, and punk af. 
</p>

<h2><a id="Reading-RSS"></a><a href="#Reading-RSS">Reading RSS</a></h2>

<p>
The toughest thing to get used to is that there is no central platform.
RSS is just a bunch of people creating RSS-formatted files and posting them
on the internet. The burden of assembling them into a reading list falls
on the reader. Thankfully there <strong>aggregators</strong>, helpful programs that regularly
check those RSS files for changes and lay them out for you in a feed.
</p>

<p>
I use <a href="https://feedly.com">Feedly</a> daily, and enjoy
<a href="https://www.inoreader.com">Inoreader</a> too. I've also heard that 
<a href="https://feeder.co">Feeder</a> and 
<a href="https://newsblur.com">NewsBlur</a> are solid options. There are plenty
of others, some with niche functionality. The cool part is that there isn't
a "main" one or a home base. They're all their own thing. All they do
is gather up changes and put them in a list for you.
</p>

<p>
To subscribe to someone's feed, you'll need to get the URL. These are
frequently posted on their blog under an "RSS feed" link or the
RSS logo.
</p>

<p>
<img alt="The RSS logo, a dot at the center of two quarter-circles, 
giving the appearance of waves radiating out from a central point
" src="https://upload.wikimedia.org/wikipedia/en/4/43/Feed-icon.svg">
</p>

<p>
The URL is to an .xml file. For my blog it looks like
</p>

<p>
<pre>
https://brandonrohrer.com/feed.xml
</pre>
</p>

<p>
For an example feed created for this post, it looks like
</p>

<p>
<pre>
https://raw.githubusercontent.com/brohrer/blog/refs/heads/main/code/example_feed.xml
</pre>
</p>

<p>
This is the key to subscribing. Copy the URL and paste it into the
field for 
"Add channel" or "Follow feeds" or whatever other name your aggregator uses.
And from then on your aggregator will revisit that URL occasionally,
checking for new content, and add it to your feed.
</p>

<p>
<figure>
  <img title="A Follow Sources dialog from Feedly" alt="A Follow Sources dialog page, with a field for pasting a feed URL
and below that a list of feeds that match the URL
" src="https://raw.githubusercontent.com/brohrer/blog_images/refs/heads/main/rss/follow_sources.png">
  <figcaption>A Follow Sources dialog from Feedly</figcaption>
</figure>
</p>

<p>
<figure>
  <img title="A channel overview on Feedly" alt="An overview of the feed, showing channel title and a thumbnail
view of the first post
" src="https://raw.githubusercontent.com/brohrer/blog_images/refs/heads/main/rss/feed_overview.png">
  <figcaption>A channel overview on Feedly</figcaption>
</figure>
</p>

<p>
<figure>
  <img title="An example post, viewed on Feedly" alt="An example post with the title Post Content and some text reading 
This can be any html.
followed by a vintage drawing of Christopher Robin reading to 
Winnie the Pooh, who is stuck in a hole.
" src="https://raw.githubusercontent.com/brohrer/blog_images/refs/heads/main/rss/example_post.png">
  <figcaption>An example post, viewed on Feedly</figcaption>
</figure>
</p>

<p>
Most aggregators also have a way to explore the more popular feeds.
</p>

<p>
<figure>
  <img title="Some popular feed topics, offered on Feedly" alt="A list of 15 industries and a handful skills as topics to search for feeds
" src="https://raw.githubusercontent.com/brohrer/blog_images/refs/heads/main/rss/feed_topics.png">
  <figcaption>Some popular feed topics, offered on Feedly</figcaption>
</figure>
</p>

<h2><a id="Writing-RSS"></a><a href="#Writing-RSS">Writing RSS</a></h2>

<p>
If the process of following RSS feeds seems duct-tape-and-bailing-wire,
you'll love writing them.
</p>

<h3><a id="1.-Find-a-place-to-host-it"></a><a href="#1.-Find-a-place-to-host-it">1. Find a place to host it</a></h3>

<p>
Aggregators need to be able to find your feed .xml file on the internet.
Any place you can upload a text file and share it with the world should do.
One free option is <a href="https://www.github.com">GitHub</a> if that's a tool
you're familiar with. Here's 
<a href="https://github.com/brohrer/blog/blob/main/code/example_feed.xml">the .xml file for the example feed
</a>
which is on GitHub.
</p>

<p>
<pre>
&lt;rss version="2.0"&gt;
  &lt;channel&gt;
    &lt;title&gt;Your Feed&lt;/title&gt;
    &lt;link&gt;https://www.brandonrohrer.com&lt;/link&gt;
    &lt;description&gt;Your Blog's name&lt;/description&gt; <br>
    &lt;item&gt;
      &lt;title&gt;Blog title&lt;/title&gt;
      &lt;link&gt;https://www.brandonrohrer.com/rss.html&lt;/link&gt;
      &lt;pubDate&gt;Sat, 16 Aug 2025 12:31:00 EDT&lt;/pubDate&gt;
      &lt;guid isPermaLink="false"&gt;https://www.brandonrohrer.com/rss.html.04&lt;/guid&gt;
      &lt;description&gt;&lt;![CDATA[
        &lt;h1&gt;Post content&lt;/h1&gt;
        &lt;p&gt;
          This can be any html.
        &lt;/p&gt;
        &lt;img src="https://upload.wikimedia.org/wikipedia/commons/9/97/Winnie-the-Pooh_45-1.png"&gt;
      ]]&gt;&lt;/description&gt;
    &lt;/item&gt; <br>
  &lt;/channel&gt;
&lt;/rss&gt;
</pre>
</p>

<p>
You can copy this directly into your own feed .xml and modify it. 
A trick to remember with GitHub is that the link to your feed will actually
be the "raw" link, which is available from the icon on the right side
of the screen when looking at the file in GitHub.
</p>

<p>
There are two major sections, the <code>channel</code> information at the top,
then information for each <code>item</code> below that.
</p>

<h3><a id="2.-Add-channel-information"></a><a href="#2.-Add-channel-information">2. Add channel information</a></h3>

<ul>
<li> <code>title</code> is the channel name. It can be anything you want. It’s what
people will see when they pull up your channel in their aggregator.</li>
<li> <code>link</code> is a website associated with your channel. For me, it's the
landing page of my blog.</li>
<li> <code>description</code> is typically a one-line explanation of what readers can
expect to see in your feed.</li>
</ul>

<p>
There are <a href="https://www.rssboard.org/rss-specification#optionalChannelElements">lots of other elements
</a>
you can add here if you like, but these are the required ones.
</p>

<h3><a id="3.-Add-item-information"></a><a href="#3.-Add-item-information">3. Add item information</a></h3>

<p>
Once you have the channel info in place you can add an item.
An item needs a few basic pieces of information.
</p>

<ul>
<li> <code>title</code> is the name of the particular post. </li>
<li> <code>link</code> is a URL associated with it.</li>
<li> <code>pubDate</code> is <a href="https://whitep4nth3r.com/blog/how-to-format-dates-for-rss-feeds-rfc-822/#valid-rfc-822-date-format">a date in the format of
</a>
<code>Fri, 16 Aug 2025 19:31:00 EDT</code>. It shows up at the top of a post as
the publication date.</li>
<li> <code>guid</code> (globally unique identifier) is a string that aggregators can use
as an ID for this post. I find it useful for when I update the content
of the post and I want aggregators to re-load it on their next pass.
Changing the guid signals to the aggregator that the post needs to be
re-loaded. By default, RSS assumes that this is a permanent link to the
website being promoted by this post item. If you include the argument
<code>isPermaLink="false"</code> that signals that this isn't intended to be a URL, just
an identifying string.</li>
<li> <code>description</code> is the body of the post. It can be a one-line teaser
for the linked content or it can be an entire novel. Everything
between the <code>&lt;![CDATA[</code> and <code>]]&gt;</code> delimiters will be interpreted as straight
html, which is super useful if you want to do pretty formatting or
include images. Not all aggregators will interpret all html tags
(for instance <code>&lt;script&gt;</code>
<a href="https://validator.w3.org/feed/docs/warning/SecurityRisk.html">is likely to get skipped</a>
for security reasons),
but any html that gives the aggregator pause will usually just be skipped over.</li>
</ul>

<p>
There are a number of
<a href="https://www.rssboard.org/rss-specification#hrelementsOfLtitemgt">other item elements</a>
you an add if you wish, but this is the subset I've found most useful.
</p>

<p>
You can add as many items as you like. Just repeat the <code>&lt;item&gt;</code> section.
</p>

<p>
<pre>...
    &lt;item&gt;
      &lt;title&gt;First post&lt;/title&gt;
      ...
    &lt;/item&gt;
    ...
    &lt;item&gt;
      &lt;title&gt;Second post&lt;/title&gt;
      ...
    &lt;/item&gt;
   ...
    &lt;item&gt;
      &lt;title&gt;Third post&lt;/title&gt;
      ...
    &lt;/item&gt;
    ...
</pre>
</p>

<p>
And that's it. You've created an RSS feed. Every time you edit your .xml
file, you've updated your feed.
</p>

<p>
Debugging feed .xml files can be fiddly. There are a lot of details that
have to be just so, and it can take a loooong time to
wait for the aggregrator to re-scan so that you can check the results.
A cool thing I discovered while writing this is that there are RSS
validation services like 
<a href="https://validator.w3.org/feed/">this one</a> and
<a href="https://www.rssboard.org/rss-validator/check.cgi">this one</a>
where you can
enter the contents of your feed file or the URL for your feed,
and it will check your feed for errors
right away. It revealed several imperfections in my own feed that I 
was oblivious to.
</p>

<h2><a id="RSS-is-different-than-other-social-media"></a><a href="#RSS-is-different-than-other-social-media">RSS is different than other social media</a></h2>

<h3><a id="Things-that-you-give-up"></a><a href="#Things-that-you-give-up">Things that you give up</a></h3>

<p>
When you send an RSS post out into the Internet, you can't tell whether one
person sees it or a thousand. You have no <strong>analytics</strong>, no likes, hearts,
or stars, no engagement dopamine. There is also no <strong>interaction</strong> with your
your readers, no comment section, Q and A, or quote posts.
There is also no <strong>algorithm</strong> you can game for boosting. Posts
just show up in the order they are published.
</p>

<h3><a id="Things-you-get"></a><a href="#Things-you-get">Things you get</a></h3>

<p>
In exchange for all that, you get a more <strong>deliberate experience</strong> of reading and writing.
There is more friction in publishing and following a feed than of downloading
an app and snapping a picture of your latte.
RSS requires intention, and so invites more thought.
It makes doomscrolling all but impossible.
Related to this, posts are often longer and more thought out than
the Tweets of yore. In my experience there are
<strong>more quirks and rabbit holes</strong>.
Most importantly, you also get <strong>control</strong> over what you can publish and
in what format.  You have independence from any rules or policy decisions
that might be imposed by a central authority.
There is no one who can boost it, bury it, or shut it down.
It is an indestructible distribution channel.
</p>

<h3><a id="A-note-about-Atom"></a><a href="#A-note-about-Atom">A note about Atom</a></h3>

<p>
You don't have to spend long in the world of RSS before you start hearing about
Atom. Atom is a very similar format that serves a very similar purpose.
It was backed by Google and for a while there was a great deal of contention
between proponents of RSS and Atom, which led to a lot of intense...um...discussion. 
<a href="https://danielmiessler.com/blog/atom-rss-why-we-should-just-call-them-feeds-instead-of-rss-feeds">Atom is better</a>
in the sense that it resolved several points of ambiguous behavior and
unappealing flaws of RSS, but in retrospect, the "reader wars" were probably
more distracting than productive and left the community a little fragmented.
</p>

<p>
Atom still exists. Plenty of people still use it, although from what
I gather RSS is more popular. Most aggregators can read both RSS and Atom just fine.
The shortcomings of RSS are not anything that is likely to bother any but
the geekiest users. I leave it as an exercise to the reader to decide if it
matters enough to spend any cognitive cycles on.
</p>

      ]]></description>
  </item>

  <item>
    <title>
    Transformers from Scratch 4/🧵
    </title>
    <link>
    https://www.brandonrohrer.com/transformers#markov_chain
    </link>
    <pubDate>
    Fri, 15 Aug 2025 19:01:00 EDT
    </pubDate>
    <guid isPermaLink="false">
    2025081502
    </guid>
    <description><![CDATA[
        <h3>First order sequence model</h3>
        <p>
          We can set aside matrices for a minute and get back to what
          we really care about, sequences of words. Imagine that as we
          start to develop our natural language computer interface
          we want to handle just three possible commands:
        </p>
          <ul>
            <li>
              <em>Show me my directories please</em>.
            </li>
            <li>
              <em>Show me my files please</em>.
            </li>
            <li>
              <em>Show me my photos please</em>.
            </li>
          </ul>
        <p>
          Our vocabulary size is now seven:<br>
          {<em>directories, files, me, my, photos, please, show</em>}.
        </p>
        <p>
          One useful way to represent sequences is with a transition model.
          For every word in the vocabulary, it shows what the next word
          is likely to be. If users ask about photos half
          the time, files 30% of the time, and directories the rest
          of the time, the transition model will look like this.
          The sum of the transitions away from any word will always add up
          to one.
        </p>
          <img title="Markov chain transition model"
            src="https://raw.githubusercontent.com/brohrer/blog_images/refs/heads/main/transformers/markov_chain.png"
            alt="Markov chain transition model"
            style="height: 250px;">
        <p>
          This particular transition model is called a
          <strong>Markov chain</strong>,
          because it satisfies the
          <a href="https://en.wikipedia.org/wiki/Markov_property">
            Markov property</a>
          that the probabilities for the next word depend only on
          recent words. More specifically, it is a first order
          Markov model because it only looks at the single most recent word.
          If it considered the two most recent words it would be
          a second order Markov model.
        </p>
        <p>
          Our break from matrices is over. It turns out that
          Markov chains can be expressed conveniently in matrix form.
          Using the same indexing scheme that we used when creating one-hot
          vectors, each row represents one of the words in our vocabulary.
          So does each column. The matrix transition model
          treats a matrix as a lookup table. Find the row
          that corresponds to the word you’re interested in. The value in
          each column shows the probability of that word coming next.
          Because the value of each element in the matrix represents
          a probability, they will all fall between zero and one.
          Because probabilities always sum to one, the values in each
          row will always add up to one.
        </p>
          <img title="Transition matrix"
            src="https://raw.githubusercontent.com/brohrer/blog_images/refs/heads/main/transformers/transition_matrix.png"
            alt="Transition matrix"
            style="height: 300px;">
        <p>
          In the transition matrix here we can see the structure
          of our three sentences clearly. Almost all of the transition
          probabilities are zero or one. There is only one place in
          the Markov chain where branching happens. After <em>my</em>,
          the words <em>directories</em>, <em>files</em>, or <em>photos</em>
          might appear, each with a different probability. Other than that,
          there’s no uncertainty about which word will come next.
          That certainty is reflected by having mostly ones and zeros in the
          transition matrix.
        </p>
        <p>
          We can revisit our trick of using matrix multiplication
          with a one-hot vector to pull out the transition probabilities
          associated with any given word. For instance, if we just wanted
          to isolate the probabilities of which word comes after <em>my</em>,
          we can create a one-hot vector representing the word <em>my</em>
          and multiply it by our transition matrix. This pulls out
          the relevant row and shows us the probability distribution
          of what the next word will be.
        </p>
          <img title="Transition probability lookup"
            src="https://raw.githubusercontent.com/brohrer/blog_images/refs/heads/main/transformers/transition_lookups.png"
            alt="Transition probability lookup"
            style="height: 300px;">
      ]]></description>
  </item>


  <item>
    <title>
    Transformers from Scratch 3/🧵
    </title>
    <link>
    https://www.brandonrohrer.com/transformers
    </link>
    <pubDate>
    Fri, 15 Aug 2025 07:01:00 EDT
    </pubDate>
    <guid isPermaLink="false">
    2025081500
    </guid>
    <description><![CDATA[
        <h3 id="matrix_multiplication">Matrix multiplication</h3>
        <p>
          The dot product is the building block of matrix multiplication,
          a very particular way to combine a pair of two-dimensional arrays.
          We'll call the first of these matrices <em>A</em> and the second
          one <em>B</em>.
          In the simplest case, when <em>A</em> has only one row and
          <em>B</em> has only one column, the result of matrix multiplication
          is the dot product of the two.
        </p>
        <p style="text-align:center;">
          <img title="multiplication of a single row matrix and a single column matrix"
            src="https://raw.githubusercontent.com/brohrer/blog_images/refs/heads/main/transformers/matrix_mult_one_row_one_col.png"
            alt="multiplication of a single row matrix and a single column matrix"
            style="height: 300px;">
        </p>
        <p>
          Notice how the number of columns in <em>A</em> and the number of
          rows in <em>B</em> needs to be the same for the two arrays
          to match up and for the dot product to work out.
        </p>
        <p>
          When <em>A</em> and <em>B</em> start to grow, matrix multiplication
          starts to get trippy. To handle more than one row in <em>A</em>,
          take the dot product of <em>B</em> with each row separately.
          The answer will have as many rows as <em>A</em> does.
        </p>
        <p style="text-align:center;">
          <img title="multiplication of a two row matrix and a single column matrix"
            src="https://raw.githubusercontent.com/brohrer/blog_images/refs/heads/main/transformers/matrix_mult_two_row_one_col.png"
            alt="multiplication of a two row matrix and a single column matrix"
            style="height: 250px;">
        </p>
        <p>
          When <em>B</em> takes on more columns, take the dot product of
          each column with <em>A</em> and stack the results in successive
          columns.
        </p>
        <p style="text-align:center;">
          <img title="multiplication of a one row matrix and a two column matrix"
            src="https://raw.githubusercontent.com/brohrer/blog_images/refs/heads/main/transformers/matrix_mult_one_row_two_col.png"
            alt="multiplication of a one row matrix and a two column matrix"
            style="height: 250px;">
        </p>
        <p>
         Now we can extend this to mutliplying any two matrices, as long as
         the number of columns in <em>A</em> is the same as the number of
         rows in <em>B</em>. The result will have the same
         number of rows as <em>A</em> and the same number of columns as
         <em>B</em>.
        </p>
        <p style="text-align:center;">
          <img title="multiplication of a three row matrix and a two column matrix"
            src="https://raw.githubusercontent.com/brohrer/blog_images/refs/heads/main/transformers/matrix_mult_three_row_two_col.png"
            alt="multiplication of a one three matrix and a two column matrix"
            style="height: 450px;">
        </p>
        <p>
          If this is the first time you're seeing this, it might
          feel needlessly complex, but I promise it pays off later.
        </p>

        <h4 id="table_lookup">Matrix multiplication as a table lookup</h4>
        <p>
          Notice how matrix multiplication acts as a lookup table here.
          Our <em>A</em> matrix is made up of a stack of one-hot vectors.
          They have ones in the first column, the fourth column,
          and the third column, respectively. When we work through the
          matrix multiplication, this serves to pull out the first row,
          the fourth row, and the third row of the <em>B</em> matrix,
          in that order. This trick of using a one-hot vector to pull
          out a particular row of a matrix is at the core of how
          transformers work.
        </p>
    ]]></description>
  </item>

  <item>
    <title>
    Transformers from Scratch  2/🧵
    </title>
    <link>
    https://www.brandonrohrer.com
    </link>
    <pubDate>
    Thu, 14 Aug 2025 20:01:00 EDT
    </pubDate>
    <guid isPermaLink="false">
    2025081405
    </guid>
    <description><![CDATA[
          <h3 id="dot_product">Dot product</h3>
        <p>
          One really useful thing about the one-hot representation is that
          it lets us compute
          <a href="https://en.wikipedia.org/wiki/Dot_product">dot products</a>.
          These are also known by other
          intimidating names like inner product and scalar product.
          To get the dot product of two vectors, multiply their
          corresponding elements, then add the results.
        </p>
        <p style="text-align:center;">
          <img title="Dot product illustration"
            src="https://raw.githubusercontent.com/brohrer/blog_images/refs/heads/main/transformers/dot_product.png"
            alt="Dot product illustration"
            style="height: 300px;">
        </p>
        <p>
          Dot products are especially useful when we're working with our
          one-hot word representations. The dot product of any one-hot
          vector with itself is one.
        </p>
        <p style="text-align:center;">
          <img title="Dot product of matching vectors"
            src="https://raw.githubusercontent.com/brohrer/blog_images/refs/heads/main/transformers/match.png"
            alt="Dot product of matching vectors"
            style="height: 300px;">
        </p>
        <p>
          And the dot product of any one-hot vector with any other one-hot
          vector is zero.
        </p>
        <p style="text-align:center;">
          <img title="Dot product of non-matching vectors"
            src="https://raw.githubusercontent.com/brohrer/blog_images/refs/heads/main/transformers/non_match.png"
            alt="Dot product of non-matching vectors"
            style="height: 300px;">
        </p>
        <p>
          The previous two examples show how dot products
          can be used to measure similarity. As another example,
          consider a vector of values that represents a combination of words
          with varying weights.
          A one-hot encoded word can be compared against it with the
          dot product
          to show how strongly that word is represented.
        </p>
        <p style="text-align:center;">
          <img title="Dot product gives the similarity between two vectors"
            src="https://raw.githubusercontent.com/brohrer/blog_images/refs/heads/main/transformers/similarity.png"
            alt="Dot product gives the similarity between two vectors"
            style="height: 300px;">
        </p>
    ]]></description>
  </item>

  <item>
    <title>
    Transformers from Scratch  1/🧵
    </title>
    <link>
    https://www.brandonrohrer.com
    </link>
    <pubDate>
    Wed, 13 Aug 2025 22:01:00 EDT
    </pubDate>
    <guid isPermaLink="false">
    2025081400
    </guid>
    <description><![CDATA[
<p>
Behind all the GPTs and Geminis and Claudes and Llamas are transformers. They were introduced as a tool for sequence transduction—converting one sequence of symbols to another—and are now used almost entirely for sequence completion—given a starting prompt, carry on in the same vein and style.
</p>
<p>
Here is a deep dive into the nuts and bolts of what make them tick. This isn't a short journey, but I hope you'll be glad you came.
</p>

<h2>One-hot encoding</h2>
<p>
In the beginning were the words. So very many words. Our first step is to convert all the words to numbers so we can do math on them.
</p>
<p>
Imagine that our goal is to create the computer that responds to our voice commands. It’s our job to build the transformer that converts (or transduces) a sequence of sounds to a sequence of words.
</p>
<p>
We start by choosing our vocabulary, the collection of symbols that we are going to be working with in each sequence. In our case, there will be two different sets of symbols, one for the input sequence to represent vocal sounds and one for the output sequence to represent words.
</p>
<p>
For now, let's assume we're working with English. There are tens of thousands of words in the English language, and perhaps another few thousand to cover computer-specific terminology. That would give us a vocabulary size that is the better part of a hundred thousand. One way to convert words to numbers is to start counting at one and assign each word its own number. Then a sequence of words can be represented as a list of numbers.
</p>
<p>
For example, consider a tiny language with a vocabulary size of three: files, find, and my. Each word could be swapped out for a number, perhaps files = 1, find = 2, and my = 3. Then the sentence "Find my files", consisting of the word sequence [ find, my, files ] could be represented instead as the sequence of numbers [2, 3, 1].
</p>
<p>
This is a perfectly valid way to convert symbols to numbers, but it turns out that there's another format that's even easier for computers to work with, one-hot encoding. In one-hot encoding a symbol is represented by an array of mostly zeros, the same length of the vocabulary, with only a single element having a value of one. Each element in the array corresponds to a separate symbol.
</p>
<p>

Another way to think about one-hot encoding is that each word still gets assigned its own number, but now that number is an index to an array. Here is our example above, in one-hot notation.
</p>
        <p style="text-align:center;">
          <img title="A one-hot encoded vocabulary"
            src="https://raw.githubusercontent.com/brohrer/blog_images/refs/heads/main/transformers/one_hot_vocabulary.png"
            alt="A one-hot encoded vocabulary"
            style="height: 300px;">
        </p>
        <p>
          So the sentence "Find my files" becomes a sequence of one-dimensional
          arrays,
          which, after you squeeze them together,
          starts to look like a two-dimensional array.
        </p>
        <p style="text-align:center;">
          <img title="A one-hot encoded sentence"
            src="https://raw.githubusercontent.com/brohrer/blog_images/refs/heads/main/transformers/one_hot_sentence.png"
            alt="A one-hot encoded sentence"
            style="height: 300px;">
        </p>

<p>
So the sentence "Find my files" becomes a sequence of one-dimensional arrays, which, after you squeeze them together, starts to look like a two-dimensional array.
</p>
<p>
Heads-up, I'll be using the terms "one-dimensional array" and "vector" interchangeably. Likewise with "two-dimensional array" and "matrix".
</p>
    ]]></description>
  </item>

</channel>
</rss> 
